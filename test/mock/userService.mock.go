// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fxmbx/go_practice_pr/services/user_service (interfaces: UserService)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"

	dto "github.com/fxmbx/go_practice_pr/dto"
	userdto "github.com/fxmbx/go_practice_pr/dto/userdto"
	utils "github.com/fxmbx/go_practice_pr/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(arg0 userdto.RegisterRequest) (*userdto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*userdto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), arg0)
}

// FindUserByEmail mocks base method.
func (m *MockUserService) FindUserByEmail(arg0 string) (*userdto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", arg0)
	ret0, _ := ret[0].(*userdto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserServiceMockRecorder) FindUserByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserService)(nil).FindUserByEmail), arg0)
}

// FindUserByID mocks base method.
func (m *MockUserService) FindUserByID(arg0 string) (*userdto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", arg0)
	ret0, _ := ret[0].(*userdto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserServiceMockRecorder) FindUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserService)(nil).FindUserByID), arg0)
}

// GetAllUsers mocks base method.
func (m *MockUserService) GetAllUsers(arg0 dto.RequestQuery) (*utils.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0)
	ret0, _ := ret[0].(*utils.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserServiceMockRecorder) GetAllUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserService)(nil).GetAllUsers), arg0)
}

// GetAllUsersIncludingDeletedUsers mocks base method.
func (m *MockUserService) GetAllUsersIncludingDeletedUsers(arg0 dto.RequestQuery) (*utils.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsersIncludingDeletedUsers", arg0)
	ret0, _ := ret[0].(*utils.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsersIncludingDeletedUsers indicates an expected call of GetAllUsersIncludingDeletedUsers.
func (mr *MockUserServiceMockRecorder) GetAllUsersIncludingDeletedUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsersIncludingDeletedUsers", reflect.TypeOf((*MockUserService)(nil).GetAllUsersIncludingDeletedUsers), arg0)
}

// RemoveUser mocks base method.
func (m *MockUserService) RemoveUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockUserServiceMockRecorder) RemoveUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockUserService)(nil).RemoveUser), arg0)
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(arg0 userdto.UpdateUserRequest) (*userdto.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(*userdto.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), arg0)
}
